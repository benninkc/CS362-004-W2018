        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************
        -:    2: ** Author: Casey Bennink ONID: benninkc
        -:    3: ** Date: 2/4/18
        -:    4: ** Description: Assignment 3 unittest1.c
        -:    5: ** unit test for discardCard function
        -:    6:*********************************************************************/
        -:    7:#include <stdlib.h>
        -:    8:#include <stdio.h>
        -:    9:#include <time.h>
        -:   10:#include "assert.h"
        -:   11:#include "dominion.h"
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main(int argc, char const *argv[]) {
        1:   15:    int seed = 1024;
        1:   16:    int numPlayer = 3;
        -:   17:    int p, r, d, handCount, playedCount, playedResult, curFlag;
        1:   18:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   19:               , remodel, smithy, village, baron, great_hall};
        -:   20:    struct gameState G;
        1:   21:    int maxHandCount = 5;
        -:   22:
        -:   23:    int cards[MAX_HAND];
        -:   24:    int i;
      501:   25:    for (i = 0; i < MAX_HAND; i++)
        -:   26:    {
      500:   27:        cards[i] = adventurer;
        -:   28:    }
        -:   29:
        1:   30:    printf ("TESTING discardCard():\n");
        4:   31:    for (p = 0; p < numPlayer; p++) {
       18:   32:    	for(handCount=1; handCount <= maxHandCount; handCount++) {
      120:   33:    		for(playedCount=0; playedCount <= 6; playedCount++) {
      525:   34:    			for(curFlag=0; curFlag < 4; curFlag++) {
      420:   35:    				printf("Test player %d with %d in hand, %d in played, and %d flag\n",p, handCount, playedCount, curFlag);
      420:   36:    				memset(&G, 23, sizeof(struct gameState));
      420:   37:    				r = initializeGame(numPlayer, k, seed, &G);
        -:   38:
      420:   39:    				G.handCount[p] = handCount;
        -:   40:
      420:   41:    				G.playedCardCount = playedCount;
        -:   42:
        -:   43:    				int x;
     1680:   44:    				for (x = 0; x < handCount; x++) {
     1260:   45:    					G.hand[p][x] = k[x];
        -:   46:    				}
     1680:   47:    				for (x = 0; x < playedCount; x++) {
     1260:   48:    					G.playedCards[x] = k[x];
        -:   49:    				}
        -:   50:
      420:   51:    				d = discardCard(handCount/2, p, &G, curFlag);
        -:   52:
      420:   53:    				if (curFlag < 1) {
      105:   54:    					playedResult = playedCount + 1;
        -:   55:    				}
        -:   56:    				else {
      315:   57:    					playedResult = playedCount;
        -:   58:    				}
        -:   59:
      420:   60:    				printf("G.handCount = %d, expected = %d\n", G.handCount[p], handCount - 1);
      420:   61:    				printf("G.playedCardCount = %d, expected = %d\n", G.playedCardCount, playedResult);
        -:   62:
      420:   63:    				if (G.handCount[p] == handCount - 1 && G.playedCardCount == playedResult) {
      420:   64:    					printf("discard TEST PASSED\n");
        -:   65:    				}
        -:   66:    				else {
    #####:   67:    					printf("discard TEST FAILED\n");
        -:   68:    				}
        -:   69:
        -:   70:    			}
        -:   71:    		}
        -:   72:    	}
        -:   73:    
        -:   74:    }
        -:   75:
        1:   76:	return 0;
        -:   77:}
