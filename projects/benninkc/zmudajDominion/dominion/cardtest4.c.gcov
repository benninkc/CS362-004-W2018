        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************
        -:    2: ** Author: Casey Bennink ONID: benninkc
        -:    3: ** Date: 2/4/18
        -:    4: ** Description: Assignment 3 cardtest4.c
        -:    5: ** test for Salvager
        -:    6:*********************************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        1:   14:int main(int argc, char const *argv[]) {
        -:   15:    int i;
        1:   16:    int seed = 1024;
        1:   17:    int numPlayer = 3;
        -:   18:    int p, r, handCount, correctBuys, correctCoins, toTrash;
        1:   19:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   20:               , remodel, smithy, village, baron, great_hall};
        -:   21:    struct gameState G;
        -:   22:
        -:   23:    int salv[11];
        1:   24:    salv[0] = salvager;
       11:   25:    for (i = 1; i < 11; i++)
        -:   26:    {
       10:   27:        salv[i] = k[i - 1];
        -:   28:    }
        -:   29:
        1:   30:    printf ("TESTING Salvager card:\n");
        4:   31:    for (p = 0; p < numPlayer; p++) {
       33:   32:    	for (handCount = 2; handCount <= 11; handCount++) {
      195:   33:    		for(toTrash = 1; toTrash < handCount; toTrash++){
      165:   34:    			printf("Test player %d playing Salvager card, hand size: %d, hand to trash: %d\n", p, handCount, toTrash);
        -:   35:    		
      165:   36:    			memset(&G, 23, sizeof(struct gameState));
      165:   37:        	    r = initializeGame(numPlayer, k, seed, &G);
      165:   38:        	    G.whoseTurn = p;
      165:   39:        	    G.handCount[p] = handCount;
      165:   40:        	    correctBuys = G.numBuys + 1;
      165:   41:        	    correctCoins = G.coins + getCost(salv[toTrash]);
        -:   42:
      165:   43:        	    memcpy(G.hand[p], salv, sizeof(int) * handCount);
        -:   44:
      165:   45:        	    r = playCard(0, toTrash, 0, 0, &G);
        -:   46:
      165:   47:        	    printf("numBuys = %d, expected = %d\n", G.numBuys, correctBuys);
      165:   48:        	    printf("coins = %d, expected = %d\n", G.coins, correctCoins);
        -:   49:
      165:   50:        	    if (G.numBuys == correctBuys + 2 && G.coins == correctCoins) {
    #####:   51:        	    	printf("The Salvager TEST PASSED\n");
        -:   52:        	    }
        -:   53:        	    else {
      165:   54:        	    	printf("Salvager TEST FAILED\n");
        -:   55:        	    }
        -:   56:        	}
        -:   57:    	}
        -:   58:    }
        -:   59:	
        -:   60:
        1:   61:	return 0;
        -:   62:}
