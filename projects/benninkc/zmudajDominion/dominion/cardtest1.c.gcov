        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************
        -:    2: ** Author: Casey Bennink ONID: benninkc
        -:    3: ** Date: 2/4/18
        -:    4: ** Description: Assignment 3 cardtest1.c
        -:    5: ** test for Smithy
        -:    6:*********************************************************************/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include <string.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include "rngs.h"
        -:   14:
        1:   15:int main(int argc, char const *argv[]) {
        1:   16:    int seed = 1024;
        1:   17:    int numPlayer = 3;
        -:   18:    int p, r, handCount;
        1:   19:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   20:               , remodel, smithy, village, baron, great_hall};
        -:   21:    struct gameState G;
        1:   22:    int maxHandCount = 5;
        -:   23:
        -:   24:    int smy[MAX_HAND];
        -:   25:    int i;
      501:   26:    for (i = 0; i < MAX_HAND; i++)
        -:   27:    {
      500:   28:        smy[i] = smithy;
        -:   29:    }
        -:   30:
        1:   31:    printf ("TESTING smithy card:\n");
        4:   32:    for (p = 0; p < numPlayer; p++) {
        -:   33:
       18:   34:    	for (handCount = 1; handCount <= maxHandCount; handCount++) {
       15:   35:    		printf("Test player %d playing Smithy card, hand size: %d\n", p, handCount);
        -:   36:    		
       15:   37:    		memset(&G, 23, sizeof(struct gameState));
       15:   38:            r = initializeGame(numPlayer, k, seed, &G);
       15:   39:            G.whoseTurn = p;
       15:   40:            G.handCount[p] = handCount;
       15:   41:            memcpy(G.hand[p], smy, sizeof(int) * handCount);
        -:   42:
       15:   43:            r = playCard(0, 0, 0, 0, &G);
        -:   44:
       15:   45:            printf("G.handCount = %d, expected = %d\n", G.handCount[p], handCount + 2);
        -:   46:
       15:   47:            if (G.handCount[p] == handCount + 2) {
    #####:   48:            	printf("Smithy TEST PASSED\n");
        -:   49:            }
        -:   50:            else {
       15:   51:            	printf("Smith TEST FAILED\n");
        -:   52:            }
        -:   53:    	}
        -:   54:    }
        -:   55:
        1:   56:	return 0;
        -:   57:}
