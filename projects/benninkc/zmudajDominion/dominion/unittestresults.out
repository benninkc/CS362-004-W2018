Result for running Dominion test suit:
unittest1.c:
TESTING discardCard():
Test player 0 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 0 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 1 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 0 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 1 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 2 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 3 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 4 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 5 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 0 flag
G.handCount = 0, expected = 0
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 1 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 2 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 1 in hand, 6 in played, and 3 flag
G.handCount = 0, expected = 0
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 0 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 1 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 2 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 3 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 4 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 5 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 0 flag
G.handCount = 1, expected = 1
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 1 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 2 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 2 in hand, 6 in played, and 3 flag
G.handCount = 1, expected = 1
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 0 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 1 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 2 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 3 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 4 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 5 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 0 flag
G.handCount = 2, expected = 2
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 1 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 2 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 3 in hand, 6 in played, and 3 flag
G.handCount = 2, expected = 2
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 0 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 1 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 2 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 3 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 4 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 5 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 0 flag
G.handCount = 3, expected = 3
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 1 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 2 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 4 in hand, 6 in played, and 3 flag
G.handCount = 3, expected = 3
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 0 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 0, expected = 0
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 1 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 1, expected = 1
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 2 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 2, expected = 2
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 3 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 3, expected = 3
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 4 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 4, expected = 4
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 5 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 5, expected = 5
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 0 flag
G.handCount = 4, expected = 4
G.playedCardCount = 7, expected = 7
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 1 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 2 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
Test player 2 with 5 in hand, 6 in played, and 3 flag
G.handCount = 4, expected = 4
G.playedCardCount = 6, expected = 6
discard TEST PASSED
File 'unittest1.c'
Lines executed:96.77% of 31
Creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:17.09% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    18900:    8:int compare(const void* a, const void* b) {
    18900:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    18900:   11:  if (*(int*)a < *(int*)b)
     5040:   12:    return -1;
    13860:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      420:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      420:   44:  SelectStream(1);
      420:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      420:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      420:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     4620:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    46200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    42000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      420:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      420:   77:  else if (numPlayers == 3)
        -:   78:    {
      420:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      420:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      420:   95:      state->supplyCount[estate] = 12;
      420:   96:      state->supplyCount[duchy] = 12;
      420:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      420:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      420:  102:  state->supplyCount[silver] = 40;
      420:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     8820:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    69300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    65100:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     4200:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     1680:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      840:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     3360:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     4200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    60900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1680:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1260:  140:      state->deckCount[i] = 0;
     5040:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     3780:  143:	  state->deck[i][j] = estate;
     3780:  144:	  state->deckCount[i]++;
        -:  145:	}
    10080:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     8820:  148:	  state->deck[i][j] = copper;
     8820:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1680:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1260:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1680:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1260:  166:      state->handCount[i] = 0;
     1260:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    11760:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    11340:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      420:  182:  state->outpostPlayed = 0;
      420:  183:  state->phase = 0;
      420:  184:  state->numActions = 1;
      420:  185:  state->numBuys = 1;
      420:  186:  state->playedCardCount = 0;
      420:  187:  state->whoseTurn = 0;
      420:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     2520:  192:  for (it = 0; it < 5; it++){
     2100:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      420:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      420:  198:  return 0;
        -:  199:}
        -:  200:
     1260:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1260:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1260:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1260:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    15120:  214:  while (state->deckCount[player] > 0) {
    12600:  215:    card = floor(Random() * state->deckCount[player]);
    12600:  216:    newDeck[newDeckPos] = state->deck[player][card];
    12600:  217:    newDeckPos++;
    46200:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    33600:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    12600:  221:    state->deckCount[player]--;
        -:  222:  }
    13860:  223:  for (i = 0; i < newDeckPos; i++) {
    12600:  224:    state->deck[player][i] = newDeck[i];
    12600:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1260:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     2100:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2100:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2100:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2100:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2100:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2100:  576:    state->deckCount[player]--;
     2100:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2100:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
      420: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
      420: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
      105: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      105: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
      420: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
      420: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
      168: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
      252: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
      252: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
      252: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
      252: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
      420: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
      420: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
      420: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
     2520: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
     2100: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
     2100: 1406:	  state->coins += 1;
        -: 1407:	}
    #####: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
    #####: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
      420: 1419:  state->coins += bonus;
        -: 1420:
      420: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
unittest2.c:
TESTING whoseTurn
Testing 0 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 0 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 0 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 0 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 1 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 1 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 1 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 1 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 2 players with player 0's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
Testing 2 players with player 1's turn
turn =  1, expected = 1 
whoseTurn TEST PASSED
Testing 2 players with player 2's turn
turn =  2, expected = 2 
whoseTurn TEST PASSED
Testing 2 players with player 3's turn
turn =  0, expected = 0 
whoseTurn TEST PASSED
File 'unittest2.c'
Lines executed:95.83% of 24
Creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:15.38% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      120:    8:int compare(const void* a, const void* b) {
      120:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      120:   11:  if (*(int*)a < *(int*)b)
       32:   12:    return -1;
       88:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       12:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       12:   44:  SelectStream(1);
       12:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        8:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
        -:   74:    {
        4:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
        -:   88:    {
        4:   89:      state->supplyCount[estate] = 8;
        4:   90:      state->supplyCount[duchy] = 8;
        4:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       32:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
       20:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
        8:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        8:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        8:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        8:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       96:  214:  while (state->deckCount[player] > 0) {
       80:  215:    card = floor(Random() * state->deckCount[player]);
       80:  216:    newDeck[newDeckPos] = state->deck[player][card];
       80:  217:    newDeckPos++;
      284:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      204:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       80:  221:    state->deckCount[player]--;
        -:  222:  }
       88:  223:  for (i = 0; i < newDeckPos; i++) {
       80:  224:    state->deck[player][i] = newDeck[i];
       80:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        8:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       12:  346:int whoseTurn(struct gameState *state) {
       12:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
    #####: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
    #####: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
    #####: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
    #####: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
    #####: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
    #####: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
    #####: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
    #####: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
    #####: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
        4: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
        4: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
       24: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
       20: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
       20: 1406:	  state->coins += 1;
        -: 1407:	}
    #####: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
    #####: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
        4: 1419:  state->coins += bonus;
        -: 1420:
        4: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
unittest3.c:
TESTING drawCard.
drawCard TEST SUCCESSFULLY COMPLETED
File 'unittest3.c'
Lines executed:74.07% of 27
Creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:15.21% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        8:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        6:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        6:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        6:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        6:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  576:    state->deckCount[player]--;
        6:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        6:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
    #####: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
    #####: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
    #####: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
    #####: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
    #####: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
    #####: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
    #####: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
    #####: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
    #####: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
        1: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
        1: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
        6: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
        5: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
        4: 1406:	  state->coins += 1;
        -: 1407:	}
        1: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
        1: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
        1: 1419:  state->coins += bonus;
        -: 1420:
        1: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
unittest4.c:
TESTING gainCard
Test player 0 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 0 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 1 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 2 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 0 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 1 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 2 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 3 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 4 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 5 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 6 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 7 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 8 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 9 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 10 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 11 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 12 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 13 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 14 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 15 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 16 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 17 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 18 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 19 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 20 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 21 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 22 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 23 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 24 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 25 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

Test player 3 with 26 supply position.
discard count = 1, expected = 1
supply count = 99, expected = 99
deck count = 51, expected = 51
supply count = 98, expected = 98
hand count = 6, expected = 6
supply count = 97, expected = 97

TESTS PASSED
File 'unittest4.c'
Lines executed:100.00% of 42
Creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:17.44% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6480:    8:int compare(const void* a, const void* b) {
     6480:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     6480:   11:  if (*(int*)a < *(int*)b)
     1728:   12:    return -1;
     4752:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      108:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      108:   44:  SelectStream(1);
      108:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      108:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      108:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1188:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    11880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    10800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      108:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      108:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      108:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      108:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      108:   95:      state->supplyCount[estate] = 12;
      108:   96:      state->supplyCount[duchy] = 12;
      108:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      108:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      108:  102:  state->supplyCount[silver] = 40;
      108:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2268:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    17820:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    16740:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1080:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      432:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      216:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      864:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1080:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    15660:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      540:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      432:  140:      state->deckCount[i] = 0;
     1728:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1296:  143:	  state->deck[i][j] = estate;
     1296:  144:	  state->deckCount[i]++;
        -:  145:	}
     3456:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3024:  148:	  state->deck[i][j] = copper;
     3024:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      540:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      432:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      540:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      432:  166:      state->handCount[i] = 0;
      432:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3024:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2916:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      108:  182:  state->outpostPlayed = 0;
      108:  183:  state->phase = 0;
      108:  184:  state->numActions = 1;
      108:  185:  state->numBuys = 1;
      108:  186:  state->playedCardCount = 0;
      108:  187:  state->whoseTurn = 0;
      108:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      648:  192:  for (it = 0; it < 5; it++){
      540:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      108:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      108:  198:  return 0;
        -:  199:}
        -:  200:
      432:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      432:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      432:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      432:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5184:  214:  while (state->deckCount[player] > 0) {
     4320:  215:    card = floor(Random() * state->deckCount[player]);
     4320:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4320:  217:    newDeckPos++;
    14472:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    10152:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     4320:  221:    state->deckCount[player]--;
        -:  222:  }
     4752:  223:  for (i = 0; i < newDeckPos; i++) {
     4320:  224:    state->deck[player][i] = newDeck[i];
     4320:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      432:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      324:  320:int supplyCount(int card, struct gameState *state) {
      324:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      540:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      540:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      540:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      540:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      540:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      540:  576:    state->deckCount[player]--;
      540:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      540:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
    #####: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
    #####: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
    #####: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
    #####: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
    #####: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
    #####: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
    #####: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
    #####: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
    #####: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
    #####: 1354:  return 0;
        -: 1355:}
        -: 1356:
      324: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
      324: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
      324: 1372:  if (toFlag == 1)
        -: 1373:    {
      108: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      108: 1375:      state->deckCount[player]++;
        -: 1376:    }
      216: 1377:  else if (toFlag == 2)
        -: 1378:    {
      108: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      108: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
      108: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      108: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
      324: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
      324: 1391:  return 0;
        -: 1392:}
        -: 1393:
      108: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
      108: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
      648: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
      540: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
      540: 1406:	  state->coins += 1;
        -: 1407:	}
    #####: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
    #####: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
      108: 1419:  state->coins += bonus;
        -: 1420:
      108: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
cardtest1.c:
TESTING smithy card:
Test player 0 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 0 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 1 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 1
G.handCount = 2, expected = 3
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 2
G.handCount = 3, expected = 4
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 3
G.handCount = 4, expected = 5
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 4
G.handCount = 5, expected = 6
Smith TEST FAILED
Test player 2 playing Smithy card, hand size: 5
G.handCount = 6, expected = 7
Smith TEST FAILED
File 'cardtest1.c'
Lines executed:95.45% of 22
Creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:23.93% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      675:    8:int compare(const void* a, const void* b) {
      675:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      675:   11:  if (*(int*)a < *(int*)b)
      180:   12:    return -1;
      495:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       15:   77:  else if (numPlayers == 3)
        -:   78:    {
       15:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       15:   95:      state->supplyCount[estate] = 12;
       15:   96:      state->supplyCount[duchy] = 12;
       15:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       30:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       45:  140:      state->deckCount[i] = 0;
      180:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      135:  143:	  state->deck[i][j] = estate;
      135:  144:	  state->deckCount[i]++;
        -:  145:	}
      360:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      315:  148:	  state->deck[i][j] = copper;
      315:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       45:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       45:  166:      state->handCount[i] = 0;
       45:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
       75:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
       45:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       45:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       45:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       45:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      540:  214:  while (state->deckCount[player] > 0) {
      450:  215:    card = floor(Random() * state->deckCount[player]);
      450:  216:    newDeck[newDeckPos] = state->deck[player][card];
      450:  217:    newDeckPos++;
     1650:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      450:  221:    state->deckCount[player]--;
        -:  222:  }
      495:  223:  for (i = 0; i < newDeckPos; i++) {
      450:  224:    state->deck[player][i] = newDeck[i];
      450:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       45:  228:  return 0;
        -:  229:}
        -:  230:
       15:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       15:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       15:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       15:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       15:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       15:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       15:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       15:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       15:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       15:  315:int handCard(int handPos, struct gameState *state) {
       15:  316:  int currentPlayer = whoseTurn(state);
       15:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      120:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      120:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      120:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      120:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      120:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      120:  576:    state->deckCount[player]--;
      120:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      120:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
       15:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
       15:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
       15:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
       15:  825:      discardCard(handPos, currentPlayer, state, 0);
       15:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
       15: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
       15: 1178:	int currentPlayer = whoseTurn(state);
       15: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
       15: 1182:	int z = 0;// this is the counter for the temp hand
       15: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
        5: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
       45: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
       30: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
       15: 1193:	discardCard(handPos, currentPlayer, state, 0);
       15: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
       30: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
       30: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
       30: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       30: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
       30: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
       30: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
       30: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
       30: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
       30: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
       30: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
       30: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
       30: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
       30: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
      165: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
      135: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
       95: 1406:	  state->coins += 1;
        -: 1407:	}
       40: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
       40: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
       30: 1419:  state->coins += bonus;
        -: 1420:
       30: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
cardtest2.c:
TESTING adventurer card:
Test player 0 playing adventurer card, hand size: 1
G.handCount = 5, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 2
G.handCount = 6, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 3
G.handCount = 7, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 4
G.handCount = 8, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 0 playing adventurer card, hand size: 5
G.handCount = 9, 4 <= expected <= 6
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 1
G.handCount = 6, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 2
G.handCount = 7, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 3
G.handCount = 8, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 4
G.handCount = 9, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 1 playing adventurer card, hand size: 5
G.handCount = 10, 4 <= expected <= 6
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 1
G.handCount = 6, 0 <= expected <= 2
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 2
G.handCount = 7, 1 <= expected <= 3
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 3
G.handCount = 8, 2 <= expected <= 4
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 4
G.handCount = 9, 3 <= expected <= 5
Adventurer TEST FAILED
Test player 2 playing adventurer card, hand size: 5
G.handCount = 10, 4 <= expected <= 6
Adventurer TEST FAILED
File 'cardtest2.c'
Lines executed:95.45% of 22
Creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:28.89% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      675:    8:int compare(const void* a, const void* b) {
      675:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      675:   11:  if (*(int*)a < *(int*)b)
      180:   12:    return -1;
      495:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       15:   77:  else if (numPlayers == 3)
        -:   78:    {
       15:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       15:   95:      state->supplyCount[estate] = 12;
       15:   96:      state->supplyCount[duchy] = 12;
       15:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       30:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       45:  140:      state->deckCount[i] = 0;
      180:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      135:  143:	  state->deck[i][j] = estate;
      135:  144:	  state->deckCount[i]++;
        -:  145:	}
      360:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      315:  148:	  state->deck[i][j] = copper;
      315:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       45:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       45:  166:      state->handCount[i] = 0;
       45:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
       75:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
       55:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       55:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       55:  209:  if (state->deckCount[player] < 1)
        5:  210:    return -1;
       50:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      555:  214:  while (state->deckCount[player] > 0) {
      455:  215:    card = floor(Random() * state->deckCount[player]);
      455:  216:    newDeck[newDeckPos] = state->deck[player][card];
      455:  217:    newDeckPos++;
     1655:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      455:  221:    state->deckCount[player]--;
        -:  222:  }
      505:  223:  for (i = 0; i < newDeckPos; i++) {
      455:  224:    state->deck[player][i] = newDeck[i];
      455:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       50:  228:  return 0;
        -:  229:}
        -:  230:
       15:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       15:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       15:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       15:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       15:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       15:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       15:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       15:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       15:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       15:  315:int handCard(int handPos, struct gameState *state) {
       15:  316:  int currentPlayer = whoseTurn(state);
       15:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      210:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      210:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       15:  533:    for (i = 0; i < state->discardCount[player];i++){
        5:  534:      state->deck[player][i] = state->discard[player][i];
        5:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       10:  538:    state->deckCount[player] = state->discardCount[player];
       10:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       10:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       10:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       10:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       10:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       10:  559:    if (deckCounter == 0)
        5:  560:      return -1;
        -:  561:
        5:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  563:    state->deckCount[player]--;
        5:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      200:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      200:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      200:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      200:  576:    state->deckCount[player]--;
      200:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      205:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
       15:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
       75:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
       60:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
       15:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
       60:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
       45:  685:	  if ( i != currentPlayer )
        -:  686:	    {
       30:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
       15:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
       15:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
       15: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
       15: 1140:	int currentPlayer = whoseTurn(state);
       15: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
       15: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
       15: 1146:	int z = 0;// this is the counter for the temp hand
       15: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
        5: 1148:		nextPlayer = 0;
        -: 1149:	}
       75: 1150:	while (drawntreasure<2) {
       45: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
       45: 1154:		drawCard(currentPlayer, state);
       45: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       45: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
       30: 1157:			drawntreasure++;
        -: 1158:		else {
       15: 1159:			temphand[z] = cardDrawn;
       15: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       15: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
       45: 1164:	while (z - 1 >= 0) {
       15: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       15: 1166:		z = z - 1;
        -: 1167:	}
       15: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
       15: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
       15: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
       15: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
       15: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
       15: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
       15: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
       15: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
       15: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
       15: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
       15: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
       30: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
       30: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
      220: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
      190: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
      140: 1406:	  state->coins += 1;
        -: 1407:	}
       50: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
       50: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
       30: 1419:  state->coins += bonus;
        -: 1420:
       30: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
cardtest3.c:
TESTING village card:
Test player 0 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 0 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 0 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 0 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 0 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 1 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 1 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 1 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 1 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 1 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 2 playing Village card, hand size: 1
G.handCount = 1, expected = 1
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 2 playing Village card, hand size: 2
G.handCount = 2, expected = 2
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 2 playing Village card, hand size: 3
G.handCount = 3, expected = 3
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 2 playing Village card, hand size: 4
G.handCount = 4, expected = 4
G.numActions = 2, expected = 2
Village TEST PASSED
Test player 2 playing Village card, hand size: 5
G.handCount = 5, expected = 5
G.numActions = 2, expected = 2
Village TEST PASSED
File 'cardtest3.c'
Lines executed:95.83% of 24
Creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:22.05% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      675:    8:int compare(const void* a, const void* b) {
      675:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      675:   11:  if (*(int*)a < *(int*)b)
      180:   12:    return -1;
      495:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       15:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       15:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      165:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       15:   77:  else if (numPlayers == 3)
        -:   78:    {
       15:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       15:   95:      state->supplyCount[estate] = 12;
       15:   96:      state->supplyCount[duchy] = 12;
       15:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      315:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     2475:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     2325:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       60:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       30:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      120:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2175:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       45:  140:      state->deckCount[i] = 0;
      180:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      135:  143:	  state->deck[i][j] = estate;
      135:  144:	  state->deckCount[i]++;
        -:  145:	}
      360:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      315:  148:	  state->deck[i][j] = copper;
      315:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       45:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       45:  166:      state->handCount[i] = 0;
       45:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      420:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      405:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       15:  182:  state->outpostPlayed = 0;
       15:  183:  state->phase = 0;
       15:  184:  state->numActions = 1;
       15:  185:  state->numBuys = 1;
       15:  186:  state->playedCardCount = 0;
       15:  187:  state->whoseTurn = 0;
       15:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       90:  192:  for (it = 0; it < 5; it++){
       75:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       15:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       15:  198:  return 0;
        -:  199:}
        -:  200:
       45:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       45:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       45:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       45:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      540:  214:  while (state->deckCount[player] > 0) {
      450:  215:    card = floor(Random() * state->deckCount[player]);
      450:  216:    newDeck[newDeckPos] = state->deck[player][card];
      450:  217:    newDeckPos++;
     1650:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      450:  221:    state->deckCount[player]--;
        -:  222:  }
      495:  223:  for (i = 0; i < newDeckPos; i++) {
      450:  224:    state->deck[player][i] = newDeck[i];
      450:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       45:  228:  return 0;
        -:  229:}
        -:  230:
       15:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       15:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       15:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       15:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       15:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       15:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       15:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       15:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       15:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       15:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       15:  315:int handCard(int handPos, struct gameState *state) {
       15:  316:  int currentPlayer = whoseTurn(state);
       15:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       30:  346:int whoseTurn(struct gameState *state) {
       30:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       90:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       90:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       90:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       90:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       90:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       90:  576:    state->deckCount[player]--;
       90:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       90:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
       15:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       15:  653:  int currentPlayer = whoseTurn(state);
       15:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       15:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
       15:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
       15:  660:  int z = 0;// this is the counter for the temp hand
       15:  661:  if (nextPlayer > (state->numPlayers - 1)){
        5:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
       15:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
       15:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
       15:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
       15:  825:      discardCard(handPos, currentPlayer, state, 0);
       15:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
    #####: 1080:      state->numBuys++;
        -: 1081:			
    #####: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
    #####: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
    #####: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
       15: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
       15: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
       15: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
       15: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
       15: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
    #####: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
       15: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
       15: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
       15: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
       15: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
       15: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
       30: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
       30: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
      150: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
      120: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
       80: 1406:	  state->coins += 1;
        -: 1407:	}
       40: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
       40: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
       30: 1419:  state->coins += bonus;
        -: 1420:
       30: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
cardtest4.c:
TESTING Salvager card:
Test player 0 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 0 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 1 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 2, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 3, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 3, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 4, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 5, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 6, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 7, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 8, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 9, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 10, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 1
numBuys = 2, expected = 2
coins = 0, expected = 11
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 2
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 3
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 4
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 5
numBuys = 2, expected = 2
coins = 0, expected = 10
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 6
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 7
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 8
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 9
numBuys = 2, expected = 2
coins = 0, expected = 9
Salvager TEST FAILED
Test player 2 playing Salvager card, hand size: 11, hand to trash: 10
numBuys = 2, expected = 2
coins = 0, expected = 8
Salvager TEST FAILED
File 'cardtest4.c'
Lines executed:96.15% of 26
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:24.62% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     7425:    8:int compare(const void* a, const void* b) {
     7425:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     7425:   11:  if (*(int*)a < *(int*)b)
     1980:   12:    return -1;
     5445:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      165:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      165:   44:  SelectStream(1);
      165:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      165:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      165:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1815:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    18150:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    16500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      165:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      165:   77:  else if (numPlayers == 3)
        -:   78:    {
      165:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      165:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      165:   95:      state->supplyCount[estate] = 12;
      165:   96:      state->supplyCount[duchy] = 12;
      165:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      165:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      165:  102:  state->supplyCount[silver] = 40;
      165:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3465:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    27225:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    25575:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1650:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      660:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      330:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1320:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1650:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    23925:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      660:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      495:  140:      state->deckCount[i] = 0;
     1980:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1485:  143:	  state->deck[i][j] = estate;
     1485:  144:	  state->deckCount[i]++;
        -:  145:	}
     3960:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3465:  148:	  state->deck[i][j] = copper;
     3465:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      660:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      495:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      660:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      495:  166:      state->handCount[i] = 0;
      495:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4620:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4455:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      165:  182:  state->outpostPlayed = 0;
      165:  183:  state->phase = 0;
      165:  184:  state->numActions = 1;
      165:  185:  state->numBuys = 1;
      165:  186:  state->playedCardCount = 0;
      165:  187:  state->whoseTurn = 0;
      165:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      990:  192:  for (it = 0; it < 5; it++){
      825:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      165:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      165:  198:  return 0;
        -:  199:}
        -:  200:
      495:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      495:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      495:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      495:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     5940:  214:  while (state->deckCount[player] > 0) {
     4950:  215:    card = floor(Random() * state->deckCount[player]);
     4950:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4950:  217:    newDeckPos++;
    18150:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    13200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     4950:  221:    state->deckCount[player]--;
        -:  222:  }
     5445:  223:  for (i = 0; i < newDeckPos; i++) {
     4950:  224:    state->deck[player][i] = newDeck[i];
     4950:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      495:  228:  return 0;
        -:  229:}
        -:  230:
      165:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      165:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      165:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      165:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      165:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      165:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      165:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      165:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      165:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      165:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      330:  315:int handCard(int handPos, struct gameState *state) {
      330:  316:  int currentPlayer = whoseTurn(state);
      330:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      495:  346:int whoseTurn(struct gameState *state) {
      495:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      825:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      825:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      825:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      825:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      825:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      825:  576:    state->deckCount[player]--;
      825:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      825:  580:  return 0;
        -:  581:}
        -:  582:
      330:  583:int getCost(int cardNumber)
        -:  584:{
      330:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       60:  602:      return 6;
        -:  603:    case council_room:
       54:  604:      return 5;
        -:  605:    case feast:
       48:  606:      return 4;
        -:  607:    case gardens:
       42:  608:      return 4;
        -:  609:    case mine:
       36:  610:      return 5;
        -:  611:    case remodel:
       30:  612:      return 4;
        -:  613:    case smithy:
       24:  614:      return 4;
        -:  615:    case village:
       18:  616:      return 3;
        -:  617:    case baron:
       12:  618:      return 4;
        -:  619:    case great_hall:
        6:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      165:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      165:  653:  int currentPlayer = whoseTurn(state);
      165:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      165:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      165:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      165:  660:  int z = 0;// this is the counter for the temp hand
      165:  661:  if (nextPlayer > (state->numPlayers - 1)){
       55:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      165:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		AdventurerEffect(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    #####:  709:	if (supplyCount(choice1, state) <= 0){
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  756:	{
    #####:  757:	  return -1;
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
        -:  761:	{
    #####:  762:	  return -1;
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  766:	{
    #####:  767:	  return -1;
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
        -:  782:	    }
        -:  783:	}
        -:  784:			
    #####:  785:      return 0;
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  791:	{
    #####:  792:	  return -1;
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
        -:  807:	    }
        -:  808:	}
        -:  809:
        -:  810:
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case smithy:
    #####:  814:		SmithyEffect(handPos, state);
        -:  815:		
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
        -:  827:		
        -:  828:    case baron:
    #####:  829:      state->numBuys++;//Increase buys by 1!
    #####:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  831:	int p = 0;//Iterator for hand!
    #####:  832:	int card_not_discarded = 1;//Flag for discard set!
    #####:  833:	while(card_not_discarded){
    #####:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  837:	    state->discardCount[currentPlayer]++;
    #####:  838:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  840:	    }
    #####:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  842:	    state->handCount[currentPlayer]--;
    #####:  843:	    card_not_discarded = 0;//Exit the loop
        -:  844:	  }
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    #####:  854:		isGameOver(state);
        -:  855:	      }
        -:  856:	    }
    #####:  857:	    card_not_discarded = 0;//Exit the loop
        -:  858:	  }
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
        -:  862:	  }
        -:  863:	}
        -:  864:      }
        -:  865:			    
        -:  866:      else{
    #####:  867:	if (supplyCount(estate, state) > 0){
    #####:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  869:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  870:	  if (supplyCount(estate, state) == 0){
    #####:  871:	    isGameOver(state);
        -:  872:	  }
        -:  873:	}
        -:  874:      }
        -:  875:	    
        -:  876:      
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case great_hall:
    #####:  880:		GreatHallEffect(handPos, state);
        -:  881:		
        -:  882:    case minion:
        -:  883:      //+1 action
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
        -:  888:			
    #####:  889:      if (choice1)		//+2 coins
        -:  890:	{
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:			
    #####:  894:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  895:	{
        -:  896:	  //discard hand
    #####:  897:	  while(numHandCards(state) > 0)
        -:  898:	    {
    #####:  899:	      discardCard(handPos, currentPlayer, state, 0);
        -:  900:	    }
        -:  901:				
        -:  902:	  //draw 4
    #####:  903:	  for (i = 0; i < 4; i++)
        -:  904:	    {
    #####:  905:	      drawCard(currentPlayer, state);
        -:  906:	    }
        -:  907:				
        -:  908:	  //other players discard hand and redraw if hand size > 4
    #####:  909:	  for (i = 0; i < state->numPlayers; i++)
        -:  910:	    {
    #####:  911:	      if (i != currentPlayer)
        -:  912:		{
    #####:  913:		  if ( state->handCount[i] > 4 )
        -:  914:		    {
        -:  915:		      //discard hand
    #####:  916:		      while( state->handCount[i] > 0 )
        -:  917:			{
    #####:  918:			  discardCard(handPos, i, state, 0);
        -:  919:			}
        -:  920:							
        -:  921:		      //draw 4
    #####:  922:		      for (j = 0; j < 4; j++)
        -:  923:			{
    #####:  924:			  drawCard(i, state);
        -:  925:			}
        -:  926:		    }
        -:  927:		}
        -:  928:	    }
        -:  929:				
        -:  930:	}
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case steward:
    #####:  934:      if (choice1 == 1)
        -:  935:	{
        -:  936:	  //+2 cards
    #####:  937:	  drawCard(currentPlayer, state);
    #####:  938:	  drawCard(currentPlayer, state);
        -:  939:	}
    #####:  940:      else if (choice1 == 2)
        -:  941:	{
        -:  942:	  //+2 coins
    #####:  943:	  state->coins = state->coins + 2;
        -:  944:	}
        -:  945:      else
        -:  946:	{
        -:  947:	  //trash 2 cards in hand
    #####:  948:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  949:	  discardCard(choice3, currentPlayer, state, 1);
        -:  950:	}
        -:  951:			
        -:  952:      //discard card from hand
    #####:  953:      discardCard(handPos, currentPlayer, state, 0);
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case tribute:
    #####:  957:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  958:	if (state->deckCount[nextPlayer] > 0){
    #####:  959:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  960:	  state->deckCount[nextPlayer]--;
        -:  961:	}
    #####:  962:	else if (state->discardCount[nextPlayer] > 0){
    #####:  963:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  964:	  state->discardCount[nextPlayer]--;
        -:  965:	}
        -:  966:	else{
        -:  967:	  //No Card to Reveal
        -:  968:	  if (DEBUG){
        -:  969:	    printf("No cards to reveal\n");
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      else{
    #####:  975:	if (state->deckCount[nextPlayer] == 0){
    #####:  976:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  977:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  978:	    state->deckCount[nextPlayer]++;
    #####:  979:	    state->discard[nextPlayer][i] = -1;
    #####:  980:	    state->discardCount[nextPlayer]--;
        -:  981:	  }
        -:  982:			    
    #####:  983:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  984:	} 
    #####:  985:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  986:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  987:	state->deckCount[nextPlayer]--;
    #####:  988:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  989:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  990:	state->deckCount[nextPlayer]--;
        -:  991:      }    
        -:  992:		       
    #####:  993:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  994:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  995:	state->playedCardCount++;
    #####:  996:	tributeRevealedCards[1] = -1;
        -:  997:      }
        -:  998:
    #####:  999:      for (i = 0; i <= 2; i ++){
    #####: 1000:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1001:	  state->coins += 2;
        -: 1002:	}
        -: 1003:		    
    #####: 1004:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
        -: 1008:	else{//Action Card
    #####: 1009:	  state->numActions = state->numActions + 2;
        -: 1010:	}
        -: 1011:      }
        -: 1012:	    
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case ambassador:
    #####: 1016:		AmbassadorEffect(choice1, choice2, state, handPos);
        -: 1017:		
        -: 1018:    case cutpurse:
        -: 1019:
    #####: 1020:      updateCoins(currentPlayer, state, 2);
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
        -: 1022:	{
    #####: 1023:	  if (i != currentPlayer)
        -: 1024:	    {
    #####: 1025:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1026:		{
    #####: 1027:		  if (state->hand[i][j] == copper)
        -: 1028:		    {
    #####: 1029:		      discardCard(j, i, state, 0);
    #####: 1030:		      break;
        -: 1031:		    }
    #####: 1032:		  if (j == state->handCount[i])
        -: 1033:		    {
    #####: 1034:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1035:			{
        -: 1036:			  if (DEBUG)
        -: 1037:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1038:			}	
    #####: 1039:		      break;
        -: 1040:		    }		
        -: 1041:		}
        -: 1042:					
        -: 1043:	    }
        -: 1044:				
        -: 1045:	}				
        -: 1046:
        -: 1047:      //discard played card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:		
        -: 1053:    case embargo: 
        -: 1054:      //+2 Coins
    #####: 1055:      state->coins = state->coins + 2;
        -: 1056:			
        -: 1057:      //see if selected pile is in play
    #####: 1058:      if ( state->supplyCount[choice1] == -1 )
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:			
        -: 1063:      //add embargo token to selected supply pile
    #####: 1064:      state->embargoTokens[choice1]++;
        -: 1065:			
        -: 1066:      //trash card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case outpost:
        -: 1071:      //set outpost flag
    #####: 1072:      state->outpostPlayed++;
        -: 1073:			
        -: 1074:      //discard card
    #####: 1075:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:      return 0;
        -: 1077:		
        -: 1078:    case salvager:
        -: 1079:      //+1 buy
      165: 1080:      state->numBuys++;
        -: 1081:			
      165: 1082:      if (choice1)
        -: 1083:	{
        -: 1084:	  //gain coins equal to trashed card
      165: 1085:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1086:	  //trash card
      165: 1087:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1088:	}
        -: 1089:			
        -: 1090:      //discard card
      165: 1091:      discardCard(handPos, currentPlayer, state, 0);
      165: 1092:      return 0;
        -: 1093:		
        -: 1094:    case sea_hag:
    #####: 1095:		SeaHagEffect(state);
        -: 1096:      
        -: 1097:		
        -: 1098:    case treasure_map:
        -: 1099:      //search hand for another treasure_map
    #####: 1100:      index = -1;
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1104:	    {
    #####: 1105:	      index = i;
    #####: 1106:	      break;
        -: 1107:	    }
        -: 1108:	}
    #####: 1109:      if (index > -1)
        -: 1110:	{
        -: 1111:	  //trash both treasure cards
    #####: 1112:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1113:	  discardCard(index, currentPlayer, state, 1);
        -: 1114:
        -: 1115:	  //gain 4 Gold cards
    #####: 1116:	  for (i = 0; i < 4; i++)
        -: 1117:	    {
    #####: 1118:	      gainCard(gold, state, 1, currentPlayer);
        -: 1119:	    }
        -: 1120:				
        -: 1121:	  //return success
    #####: 1122:	  return 1;
        -: 1123:	}
        -: 1124:			
        -: 1125:      //no second treasure_map found in hand
    #####: 1126:      return -1;
        -: 1127:    }
        -: 1128:	
    #####: 1129:  return -1;
        -: 1130:}
        -: 1131:
        -: 1132:
    #####: 1133:int AdventurerEffect(struct gameState *state)
        -: 1134:{
        -: 1135:	int i;
        -: 1136:	int j;
        -: 1137:	int k;
        -: 1138:	int x;
        -: 1139:	int index;
    #####: 1140:	int currentPlayer = whoseTurn(state);
    #####: 1141:	int nextPlayer = currentPlayer + 1;
        -: 1142:
        -: 1143:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1144:	int drawntreasure = 0; //keep
        -: 1145:	int cardDrawn;
    #####: 1146:	int z = 0;// this is the counter for the temp hand
    #####: 1147:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1148:		nextPlayer = 0;
        -: 1149:	}
    #####: 1150:	while (drawntreasure<2) {
    #####: 1151:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1152:			shuffle(currentPlayer, state);
        -: 1153:			}
    #####: 1154:		drawCard(currentPlayer, state);
    #####: 1155:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####: 1156:		if (cardDrawn == copper || cardDrawn == silver && cardDrawn == gold)
    #####: 1157:			drawntreasure++;
        -: 1158:		else {
    #####: 1159:			temphand[z] = cardDrawn;
    #####: 1160:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1161:			z++;
        -: 1162:		}
        -: 1163:	}
    #####: 1164:	while (z - 1 >= 0) {
    #####: 1165:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1166:		z = z - 1;
        -: 1167:	}
    #####: 1168:	return 0;
        -: 1169:}
        -: 1170:
    #####: 1171:int SmithyEffect(int handPos, struct gameState *state)
        -: 1172:{
        -: 1173:	int i;
        -: 1174:	int j;
        -: 1175:	int k;
        -: 1176:	int x;
        -: 1177:	int index;
    #####: 1178:	int currentPlayer = whoseTurn(state);
    #####: 1179:	int nextPlayer = currentPlayer + 1;
        -: 1180:
        -: 1181:	int cardDrawn;
    #####: 1182:	int z = 0;// this is the counter for the temp hand
    #####: 1183:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1184:		nextPlayer = 0;
        -: 1185:	}
        -: 1186:	//+3 Cards
    #####: 1187:	for (i = 1; i < 3; i++)
        -: 1188:	{
    #####: 1189:		drawCard(currentPlayer, state);
        -: 1190:	}
        -: 1191:
        -: 1192:	//discard card from hand
    #####: 1193:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1194:	return 0;
        -: 1195:}
        -: 1196:
    #####: 1197:int GreatHallEffect(int handPos, struct gameState *state)
        -: 1198:{
        -: 1199:	int i;
        -: 1200:	int j;
        -: 1201:	int k;
        -: 1202:	int x;
        -: 1203:	int index;
    #####: 1204:	int currentPlayer = whoseTurn(state);
    #####: 1205:	int nextPlayer = currentPlayer + 1;
        -: 1206:
        -: 1207:	int cardDrawn;
    #####: 1208:	int z = 0;// this is the counter for the temp hand
    #####: 1209:	if (nextPlayer > (state->numPlayers - 1))
        -: 1210:	{
    #####: 1211:		nextPlayer = 0;
        -: 1212:	}
        -: 1213:	//+1 Card
    #####: 1214:	drawCard(currentPlayer, state);
        -: 1215:
        -: 1216:	//+1 Actions
    #####: 1217:	state->numActions--;
        -: 1218:
        -: 1219:	//discard card from hand
    #####: 1220:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:	return 0;
        -: 1222:}
        -: 1223:
    #####: 1224:int AmbassadorEffect(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1225:{
        -: 1226:	int i;
        -: 1227:	int j;
        -: 1228:	int k;
        -: 1229:	int x;
        -: 1230:	int index;
    #####: 1231:	int currentPlayer = whoseTurn(state);
    #####: 1232:	int nextPlayer = currentPlayer + 1;
        -: 1233:
    #####: 1234:	int tributeRevealedCards[2] = { -1, -1 };
        -: 1235:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1236:	int drawntreasure = 0;
        -: 1237:	int cardDrawn;
    #####: 1238:	int z = 0;// this is the counter for the temp hand
    #####: 1239:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1240:		nextPlayer = 0;
        -: 1241:	}
    #####: 1242:	j = 0;		//used to check if player has enough cards to discard
        -: 1243:
    #####: 1244:	if (choice2 > 2 || choice2 < 0)
        -: 1245:	{
    #####: 1246:		return -1;
        -: 1247:	}
        -: 1248:
    #####: 1249:	if (choice1 == handPos)
        -: 1250:	{
    #####: 1251:		return -1;
        -: 1252:	}
        -: 1253:
    #####: 1254:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1255:	{
    #####: 1256:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1257:		{
    #####: 1258:			j++;
        -: 1259:		}
        -: 1260:	}
    #####: 1261:	if (j < choice2)
        -: 1262:	{
    #####: 1263:		return -1;
        -: 1264:	}
        -: 1265:
        -: 1266:	if (DEBUG)
        -: 1267:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1268:
        -: 1269:	//increase supply count for choosen card by amount being discarded
    #####: 1270:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1271:
        -: 1272:	//each other player gains a copy of revealed card
    #####: 1273:	for (i = 0; i < state->numPlayers; i++)
        -: 1274:	{
    #####: 1275:		if (i != currentPlayer)
        -: 1276:		{
    #####: 1277:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1278:		}
        -: 1279:	}
        -: 1280:
        -: 1281:	//discard played card from hand
    #####: 1282:	discardCard(handPos, currentPlayer, state, 0);
        -: 1283:
        -: 1284:	//trash copies of cards returned to supply
    #####: 1285:	for (j = 0; j < choice2; j++)
        -: 1286:	{
    #####: 1287:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1288:		{
    #####: 1289:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1290:			{
    #####: 1291:				discardCard(i, currentPlayer, state, 1);
    #####: 1292:				break;
        -: 1293:			}
        -: 1294:		}
        -: 1295:	}
        -: 1296:
    #####: 1297:	return 0;
        -: 1298:}
        -: 1299:
    #####: 1300:int SeaHagEffect(struct gameState *state)
        -: 1301:{
        -: 1302:	int i;
    #####: 1303:	int currentPlayer = whoseTurn(state);
    #####: 1304:	int nextPlayer = currentPlayer + 1;
        -: 1305:
    #####: 1306:	if (nextPlayer > (state->numPlayers - 1)) {
    #####: 1307:		nextPlayer = 0;
        -: 1308:	}
    #####: 1309:	for (i = 0; i < state->numPlayers; i++) {
    #####: 1310:		if (i == currentPlayer) {
    #####: 1311:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1312:			state->discardCount[i]++;
    #####: 1313:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1314:		}
        -: 1315:	}
    #####: 1316:	return 0;
        -: 1317:}
        -: 1318:
      330: 1319:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1320:{
        -: 1321:	
        -: 1322:  //if card is not trashed, added to Played pile 
      330: 1323:  if (trashFlag < 1)
        -: 1324:    {
        -: 1325:      //add card to played pile
      165: 1326:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      165: 1327:      state->playedCardCount++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //set played card to -1
      330: 1331:  state->hand[currentPlayer][handPos] = -1;
        -: 1332:	
        -: 1333:  //remove card from player's hand
      330: 1334:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1335:    {
        -: 1336:      //reduce number of cards in hand
       33: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
      297: 1339:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1340:    {
        -: 1341:      //reduce number of cards in hand
    #####: 1342:      state->handCount[currentPlayer]--;
        -: 1343:    }
        -: 1344:  else 	
        -: 1345:    {
        -: 1346:      //replace discarded card with last card in hand
      297: 1347:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1348:      //set last card to -1
      297: 1349:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1350:      //reduce number of cards in hand
      297: 1351:      state->handCount[currentPlayer]--;
        -: 1352:    }
        -: 1353:	
      330: 1354:  return 0;
        -: 1355:}
        -: 1356:
    #####: 1357:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1358:{
        -: 1359:  //Note: supplyPos is enum of choosen card
        -: 1360:	
        -: 1361:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1362:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1363:    {
    #####: 1364:      return -1;
        -: 1365:    }
        -: 1366:	
        -: 1367:  //added card for [whoseTurn] current player:
        -: 1368:  // toFlag = 0 : add to discard
        -: 1369:  // toFlag = 1 : add to deck
        -: 1370:  // toFlag = 2 : add to hand
        -: 1371:
    #####: 1372:  if (toFlag == 1)
        -: 1373:    {
    #####: 1374:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1375:      state->deckCount[player]++;
        -: 1376:    }
    #####: 1377:  else if (toFlag == 2)
        -: 1378:    {
    #####: 1379:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1380:      state->handCount[player]++;
        -: 1381:    }
        -: 1382:  else
        -: 1383:    {
    #####: 1384:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1385:      state->discardCount[player]++;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //decrease number in supply pile
    #####: 1389:  state->supplyCount[supplyPos]--;
        -: 1390:	 
    #####: 1391:  return 0;
        -: 1392:}
        -: 1393:
      330: 1394:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1395:{
        -: 1396:  int i;
        -: 1397:	
        -: 1398:  //reset coin count
      330: 1399:  state->coins = 0;
        -: 1400:
        -: 1401:  //add coins for each Treasure card in player's hand
     2145: 1402:  for (i = 0; i < state->handCount[player]; i++)
        -: 1403:    {
     1815: 1404:      if (state->hand[player][i] == copper)
        -: 1405:	{
      825: 1406:	  state->coins += 1;
        -: 1407:	}
      990: 1408:      else if (state->hand[player][i] == silver)
        -: 1409:	{
    #####: 1410:	  state->coins += 2;
        -: 1411:	}
      990: 1412:      else if (state->hand[player][i] == gold)
        -: 1413:	{
    #####: 1414:	  state->coins += 3;
        -: 1415:	}	
        -: 1416:    }	
        -: 1417:
        -: 1418:  //add bonus
      330: 1419:  state->coins += bonus;
        -: 1420:
      330: 1421:  return 0;
        -: 1422:}
        -: 1423:
        -: 1424:
        -: 1425://end of dominion.c
