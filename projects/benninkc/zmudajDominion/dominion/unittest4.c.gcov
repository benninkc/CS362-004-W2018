        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*********************************************************************
        -:    2: ** Author: Casey Bennink ONID: benninkc
        -:    3: ** Date: 2/4/18
        -:    4: ** Description: Assignment 3 unittest4.c
        -:    5: ** unit test for gainCard
        -:    6:*********************************************************************/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define NOISY_TEST 1
        -:   15:
        1:   16:int main() 
        -:   17:{
        1:   18:    int seed = 1024;
        1:   19:    int numPlayer = 4;
        -:   20:    int p;
        1:   21:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   22:    
        -:   23:    struct gameState G;
        -:   24:	int fCount, dkCount, dscCount, hCount, sCount, supplyPos;
        -:   25:
        1:   26:    printf ("TESTING gainCard\n");
        5:   27:    for (p = 0; p < numPlayer; p++) {
      112:   28:        for (supplyPos = 0; supplyPos < treasure_map+1; supplyPos++)  {
        -:   29:			#if (NOISY_TEST == 1)
      108:   30:				printf("Test player %d with %d supply position.\n", p, supplyPos);
        -:   31:			#endif
        -:   32:
      108:   33:            memset(&G, 23, sizeof(struct gameState));
      108:   34:            initializeGame(numPlayer, k, seed, &G);
        -:   35:				
      108:   36:			dkCount = 50, hCount = 5, dscCount = 0, sCount = 100;
        -:   37:
      108:   38:            G.deckCount[p] = dkCount;
      108:   39:			G.handCount[p] = hCount;
      108:   40:			G.discardCount[p] = dscCount;
      108:   41:			G.supplyCount[supplyPos] = sCount;
        -:   42:
      108:   43:			fCount = 0;
      108:   44:			dscCount++;
      108:   45:			sCount--;
        -:   46:
      108:   47:			gainCard(supplyPos, &G, fCount, p);
        -:   48:
        -:   49:			#if (NOISY_TEST == 1)
      108:   50:				printf("discard count = %d, expected = %d\n", G.discardCount[p], dscCount);
      108:   51:				printf("supply count = %d, expected = %d\n", G.supplyCount[supplyPos], sCount);
        -:   52:			#endif
      108:   53:			assert(G.discardCount[p] == dscCount);
      108:   54:			assert(G.supplyCount[supplyPos] == sCount);
        -:   55:
      108:   56:			fCount = 1;
      108:   57:			dkCount++;
      108:   58:			sCount--;
        -:   59:
      108:   60:			gainCard(supplyPos, &G, fCount, p);
        -:   61:
        -:   62:			#if (NOISY_TEST == 1)
      108:   63:				printf("deck count = %d, expected = %d\n", G.deckCount[p], dkCount);
      108:   64:				printf("supply count = %d, expected = %d\n", G.supplyCount[supplyPos], sCount);
        -:   65:			#endif
      108:   66:			assert(G.deckCount[p] == dkCount);
      108:   67:			assert(G.supplyCount[supplyPos] == sCount);
        -:   68:
      108:   69:			fCount = 2;
      108:   70:			hCount++;
      108:   71:			sCount--;
        -:   72:
      108:   73:			gainCard(supplyPos, &G, fCount, p);
        -:   74:
        -:   75:			#if (NOISY_TEST == 1)
      108:   76:				printf("hand count = %d, expected = %d\n", G.handCount[p], hCount);
      108:   77:				printf("supply count = %d, expected = %d\n", G.supplyCount[supplyPos], sCount);
        -:   78:			#endif
      108:   79:			assert(G.handCount[p] == hCount);
      108:   80:			assert(G.supplyCount[supplyPos] == sCount);
        -:   81:               
      108:   82:			puts("");
        -:   83:        }
        -:   84:    }
        -:   85:
        1:   86:    printf("TESTS PASSED\n");
        -:   87:
        1:   88:    return 0;
        -:   89:}
